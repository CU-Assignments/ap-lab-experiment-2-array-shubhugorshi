#include <iostream>
#include <vector>
#include <unordered_map>  // For efficient lookup
using namespace std;

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> map; // Map to store number and its index
        
        for (int i = 0; i < nums.size(); i++) {
            int complement = target - nums[i]; // Calculate complement
            
            // Check if complement exists in the map
            if (map.find(complement) != map.end()) {
                // If found, return the indices of the two numbers
                return {map[complement], i};
            }
            
            // Otherwise, store the current number and its index
            map[nums[i]] = i;
        }
        
        return {}; // Return empty if no solution (though problem guarantees a solution)
    }
};

int main() {
    Solution solution;
    
    // Test case
    vector<int> nums = {2, 7, 11, 15};
    int target = 9;
    
    // Get the result from the solution
    vector<int> result = solution.twoSum(nums, target);
    
    // Output the result
    cout << "Indices: [" << result[0] << ", " << result[1] << "]" << endl;
    
    return 0;
}
