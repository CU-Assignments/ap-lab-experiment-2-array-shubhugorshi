#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n = nums.size();
        int maxReach = 0;  // The farthest index we can reach
        
        // Traverse the array
        for (int i = 0; i < n; i++) {
            // If we are at an index that is beyond the farthest we can reach, return false
            if (i > maxReach) {
                return false;
            }
            
            // Update the farthest reachable index
            maxReach = max(maxReach, i + nums[i]);
            
            // If the farthest reachable index is beyond or at the last index, return true
            if (maxReach >= n - 1) {
                return true;
            }
        }
        
        return false;  // In case we finish the loop and can't reach the last index
    }
};

int main() {
    Solution solution;
    
    vector<int> nums1 = {2, 3, 1, 1, 4};
    vector<int> nums2 = {3, 2, 1, 0, 4};
    
    // Test cases
    cout << "Can jump (nums1): " << solution.canJump(nums1) << endl;  // Expected: true
    cout << "Can jump (nums2): " << solution.canJump(nums2) << endl;  // Expected: false
    
    return 0;
}
